{
    "docs": [
        {
            "location": "/", 
            "text": "Documentation for SimilarityNetworkFusion.jl package\n\n\nThis is an implementation of the Similarity Networks Fusion (SNF) method published by Wang et. al. in Nature Methods 2014\n\n\n\n\nScheme\n\n\nMore text\n\n\n\n\nTutorials\n\n\n\n\nAnother Section\n\n\n\n\nIndex", 
            "title": "Introduction"
        }, 
        {
            "location": "/#documentation-for-similaritynetworkfusionjl-package", 
            "text": "This is an implementation of the Similarity Networks Fusion (SNF) method published by Wang et. al. in Nature Methods 2014", 
            "title": "Documentation for SimilarityNetworkFusion.jl package"
        }, 
        {
            "location": "/#scheme", 
            "text": "More text", 
            "title": "Scheme"
        }, 
        {
            "location": "/#tutorials", 
            "text": "", 
            "title": "Tutorials"
        }, 
        {
            "location": "/#another-section", 
            "text": "", 
            "title": "Another Section"
        }, 
        {
            "location": "/#index", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/tutorials/Simulation1/", 
            "text": "SimilarityNetworkFusion Simulation tutorial\n\n\nHere we will go through an example for running SimilarityNetworkFusion on a simulated data.\n The data was generated by paper's authors and the details appears in the\n supplementary data, look for the second simulation. In short, there are two\n data sets representing 200 samples from two classes. In the first data set\n the first class have a Normal noise added, and the second class a Gamma\n distributed noise. In the second data set the opposite.\n\n\nThis tutorial was adopted from the Readme of the SNFtool R package on github:\n https://github.com/cran/SNFtool\n\n\n```julia\n\n\nInstall the package\n\n\nPkg.add(\"SimilarityNetworkFusion\")\nusing SimilarityNetworkFusion\n\n\nFirst, set all the parameters:\n\n\nK = 20;     # number of neighbors, usually (10~30)\nalpha = 0.5;    # hyperparameter, usually (0.3~0.8)\nT = 10;     # Number of Iterations, usually (10~20)\n\n\nData1 is of size n x d_1, where n is the number of patients, d_1 is the number of genes, e.g.\n\n\nData2 is of size n x d_2, where n is the number of patients, d_2 is the number of methylation, e.g.\n\n\nData1, Data2 = dataset(\"Simulation1\")\n\n\nHere, the simulation data (Data1, Data2) has two data types. They are complementary to each other. And two data types have the same number of points. The first half data belongs to the first cluster; the rest belongs to the second cluster.\n\n\nThe ground truth of the simulated data`\n\n\ntruelabels = vcat(repeat([1]; outer=[100]),\n                  repeat([2]; outer=[100]));\n\n\nCalculate distance matrices(here we calculate Euclidean Distance, you can use other distance, e.g,correlation)\n\n\nIf the data are all continuous values, we recommend the users to perform standard normalization before using SNF, though it is optional depending on the data the users want to use.\n\n\nData1 = sapply_df(Data1,standardize)\nData2 = sapply_df(Data2,standardize)\n\n\nCalculate the pair-wise distance; If the data is continuous, we recommend to use the function \"dist2\" as follows; if the data is discrete, we recommend the users to use ???\"\"\n\n\nDist1 = dist2(Data1)\nDist2 = dist2(Data2)\n\n\nnext, construct similarity graphs\n\n\nW1 = affinityMatrix(Dist1, K, alpha)\nW2 = affinityMatrix(Dist2, K, alpha)\n\n\nThese similarity graphs have complementary information about clusters.\n\n\np1 = displayClusters(W1,truelabels);\np2 = displayClusters(W2,truelabels);\nGadfly.hstack(p1, p2)\n\n\nnext, we fuse all the graphs\n\n\nthen the overall matrix can be computed by similarity network fusion(SNF):\n\n\nW = SNF([W1,W2], K, T)\n\n\nWith this unified graph W of size n x n, you can do either spectral clustering or Kernel NMF. If you need help with further clustering, please let us know.\n\n\nfor example, spectral clustering\n\n\nC = 2                   # number of clusters\ngroup = spectralClustering(W, C);   # the final subtypes information\n\n\nyou can evaluate the goodness of the obtained clustering results by calculate Normalized mutual information (NMI): if NMI is close to 1, it indicates that the obtained clustering is very close to the \"true\" cluster information; if NMI is close to 0, it indicates the obtained clustering is not similar to the \"true\" cluster information.\n\n\ndisplayClusters(W, group)\nSNFNMI = calNMI(group, truelabel)\n\n\nyou can also find the concordance between each individual network and the fused network\n\n\nConcordanceMatrix = concordanceNetworkNMI(list(W, W1,W2));\n\n\n```@docs\nSimilarityNetworkFusion.dataset\nSimilarityNetworkFusion.SNF", 
            "title": "Tutorial 1 - Simulated data"
        }, 
        {
            "location": "/tutorials/Simulation1/#similaritynetworkfusion-simulation-tutorial", 
            "text": "Here we will go through an example for running SimilarityNetworkFusion on a simulated data.\n The data was generated by paper's authors and the details appears in the\n supplementary data, look for the second simulation. In short, there are two\n data sets representing 200 samples from two classes. In the first data set\n the first class have a Normal noise added, and the second class a Gamma\n distributed noise. In the second data set the opposite.  This tutorial was adopted from the Readme of the SNFtool R package on github:\n https://github.com/cran/SNFtool  ```julia", 
            "title": "SimilarityNetworkFusion Simulation tutorial"
        }, 
        {
            "location": "/tutorials/Simulation1/#install-the-package", 
            "text": "Pkg.add(\"SimilarityNetworkFusion\")\nusing SimilarityNetworkFusion", 
            "title": "Install the package"
        }, 
        {
            "location": "/tutorials/Simulation1/#first-set-all-the-parameters", 
            "text": "K = 20;     # number of neighbors, usually (10~30)\nalpha = 0.5;    # hyperparameter, usually (0.3~0.8)\nT = 10;     # Number of Iterations, usually (10~20)", 
            "title": "First, set all the parameters:"
        }, 
        {
            "location": "/tutorials/Simulation1/#data1-is-of-size-n-x-d_1-where-n-is-the-number-of-patients-d_1-is-the-number-of-genes-eg", 
            "text": "", 
            "title": "Data1 is of size n x d_1, where n is the number of patients, d_1 is the number of genes, e.g."
        }, 
        {
            "location": "/tutorials/Simulation1/#data2-is-of-size-n-x-d_2-where-n-is-the-number-of-patients-d_2-is-the-number-of-methylation-eg", 
            "text": "Data1, Data2 = dataset(\"Simulation1\")", 
            "title": "Data2 is of size n x d_2, where n is the number of patients, d_2 is the number of methylation, e.g."
        }, 
        {
            "location": "/tutorials/Simulation1/#here-the-simulation-data-data1-data2-has-two-data-types-they-are-complementary-to-each-other-and-two-data-types-have-the-same-number-of-points-the-first-half-data-belongs-to-the-first-cluster-the-rest-belongs-to-the-second-cluster", 
            "text": "", 
            "title": "Here, the simulation data (Data1, Data2) has two data types. They are complementary to each other. And two data types have the same number of points. The first half data belongs to the first cluster; the rest belongs to the second cluster."
        }, 
        {
            "location": "/tutorials/Simulation1/#the-ground-truth-of-the-simulated-data", 
            "text": "truelabels = vcat(repeat([1]; outer=[100]),\n                  repeat([2]; outer=[100]));", 
            "title": "The ground truth of the simulated data`"
        }, 
        {
            "location": "/tutorials/Simulation1/#calculate-distance-matriceshere-we-calculate-euclidean-distance-you-can-use-other-distance-egcorrelation", 
            "text": "", 
            "title": "Calculate distance matrices(here we calculate Euclidean Distance, you can use other distance, e.g,correlation)"
        }, 
        {
            "location": "/tutorials/Simulation1/#if-the-data-are-all-continuous-values-we-recommend-the-users-to-perform-standard-normalization-before-using-snf-though-it-is-optional-depending-on-the-data-the-users-want-to-use", 
            "text": "Data1 = sapply_df(Data1,standardize)\nData2 = sapply_df(Data2,standardize)", 
            "title": "If the data are all continuous values, we recommend the users to perform standard normalization before using SNF, though it is optional depending on the data the users want to use."
        }, 
        {
            "location": "/tutorials/Simulation1/#calculate-the-pair-wise-distance-if-the-data-is-continuous-we-recommend-to-use-the-function-dist2-as-follows-if-the-data-is-discrete-we-recommend-the-users-to-use", 
            "text": "Dist1 = dist2(Data1)\nDist2 = dist2(Data2)", 
            "title": "Calculate the pair-wise distance; If the data is continuous, we recommend to use the function \"dist2\" as follows; if the data is discrete, we recommend the users to use ???\"\""
        }, 
        {
            "location": "/tutorials/Simulation1/#next-construct-similarity-graphs", 
            "text": "W1 = affinityMatrix(Dist1, K, alpha)\nW2 = affinityMatrix(Dist2, K, alpha)", 
            "title": "next, construct similarity graphs"
        }, 
        {
            "location": "/tutorials/Simulation1/#these-similarity-graphs-have-complementary-information-about-clusters", 
            "text": "p1 = displayClusters(W1,truelabels);\np2 = displayClusters(W2,truelabels);\nGadfly.hstack(p1, p2)", 
            "title": "These similarity graphs have complementary information about clusters."
        }, 
        {
            "location": "/tutorials/Simulation1/#next-we-fuse-all-the-graphs", 
            "text": "", 
            "title": "next, we fuse all the graphs"
        }, 
        {
            "location": "/tutorials/Simulation1/#then-the-overall-matrix-can-be-computed-by-similarity-network-fusionsnf", 
            "text": "W = SNF([W1,W2], K, T)", 
            "title": "then the overall matrix can be computed by similarity network fusion(SNF):"
        }, 
        {
            "location": "/tutorials/Simulation1/#with-this-unified-graph-w-of-size-n-x-n-you-can-do-either-spectral-clustering-or-kernel-nmf-if-you-need-help-with-further-clustering-please-let-us-know", 
            "text": "", 
            "title": "With this unified graph W of size n x n, you can do either spectral clustering or Kernel NMF. If you need help with further clustering, please let us know."
        }, 
        {
            "location": "/tutorials/Simulation1/#for-example-spectral-clustering", 
            "text": "C = 2                   # number of clusters\ngroup = spectralClustering(W, C);   # the final subtypes information", 
            "title": "for example, spectral clustering"
        }, 
        {
            "location": "/tutorials/Simulation1/#you-can-evaluate-the-goodness-of-the-obtained-clustering-results-by-calculate-normalized-mutual-information-nmi-if-nmi-is-close-to-1-it-indicates-that-the-obtained-clustering-is-very-close-to-the-true-cluster-information-if-nmi-is-close-to-0-it-indicates-the-obtained-clustering-is-not-similar-to-the-true-cluster-information", 
            "text": "displayClusters(W, group)\nSNFNMI = calNMI(group, truelabel)", 
            "title": "you can evaluate the goodness of the obtained clustering results by calculate Normalized mutual information (NMI): if NMI is close to 1, it indicates that the obtained clustering is very close to the \"true\" cluster information; if NMI is close to 0, it indicates the obtained clustering is not similar to the \"true\" cluster information."
        }, 
        {
            "location": "/tutorials/Simulation1/#you-can-also-find-the-concordance-between-each-individual-network-and-the-fused-network", 
            "text": "", 
            "title": "you can also find the concordance between each individual network and the fused network"
        }, 
        {
            "location": "/tutorials/Simulation1/#concordancematrix-concordancenetworknmilistw-w1w2", 
            "text": "```@docs\nSimilarityNetworkFusion.dataset\nSimilarityNetworkFusion.SNF", 
            "title": "ConcordanceMatrix = concordanceNetworkNMI(list(W, W1,W2));"
        }
    ]
}